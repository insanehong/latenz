#!/usr/bin/env node

const MODE_RAW = 'raw';
const MODE_PRETTY = 'pretty';

const TYPE_HTTP = false;
const TYPE_HTTPS = true;

const Latenz = require('../');
const l = new Latenz();
const fs = require('fs');
const config = JSON.parse(fs.readFileSync(__dirname + '/../package.json'));

if (process.argv.length < 3 || ['-h', '-help', '--help', '--h'].indexOf(process.argv[2]) > -1) {
  console.log("Usage:\n  latenz [domain]\n");
  process.exit();
}

const hostname = process.argv[2];

if (['-v', '-version', '--version', '--v'].indexOf(process.argv[2]) > -1) {
  console.log('v' + config.version);
  process.exit();
}

let mode = MODE_PRETTY;
if (['-r', '-raw', '--raw', '--r'].indexOf(process.argv[3]) > -1 || ['-r', '-raw', '--raw', '--r'].indexOf(process.argv[4]) > -1) {
  mode = MODE_RAW;
}

let secure = TYPE_HTTP;
if (['-s', '-secure', '--secure', '--s'].indexOf(process.argv[3]) > -1 || ['-s', '-secure', '--secure', '--s'].indexOf(process.argv[4]) > -1) {
  secure = TYPE_HTTPS;
}

l.measure(hostname, {mode: mode, secure: secure}).then(result => {
  if (mode === MODE_RAW) {
    return console.log(result);
  }

  console.log("\n" + l.formatter(MODE_PRETTY).line('Host', hostname) + "\n");
  console.log(result);
  console.log("");
}).catch((e) => {
  console.log(e.message)
  process.exit();
});
